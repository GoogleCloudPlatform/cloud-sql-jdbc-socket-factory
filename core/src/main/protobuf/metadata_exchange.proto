// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package com.google.cloud.sql.core.mdx;

// Message used by Cloud SQL connectors, including the Cloud SQL Auth Proxy and
// the Cloud SQL Language Connectors, to exchange client and connection
// metadata.
message MetadataExchangeRequest {
  // Indicates the socket-level protocol used by the database client, useful for
  // the MySQL caching_sha2_password, which detects the socket type as part
  // of the authentication protocol.
  enum ClientProtocolType {
    // Client protocol type is unspecified, TCP is used as default.
    CLIENT_PROTOCOL_TYPE_UNSPECIFIED = 0;
    // TCP socket connection, used for connections through the auth proxy's
    // TCP ports.
    TCP = 1;
    // TLS socket over TCP, used in the connectors which pass an already
    // connected TCP socket with a complete handshake to the mysql driver.
    TLS = 2;
    // Unix Domain socket connection, used for connections through the auth
    // proxy's unix sockets.
    UDS = 3;
  }

  // User agent from the connector sending the request.
  optional string user_agent = 1;

  // Client protocol type, the network protocol used by the database driver to
  // connect, which can affect the database login protocol as it does in MySQL.
  // The client should set this field when the
  // ConnectSettings.mdx_protocol_support field contains CLIENT_PROTOCOL_TYPE.
  optional ClientProtocolType client_protocol_type = 2;
}

// The response from the Cloud SQL instance back to the connector
// following an MetadataExchangeRequest.
message MetadataExchangeResponse {
  // The status of the server metadata exchange.
  enum ResponseStatusCode {
    // Unknown response code
    RESPONSE_STATUS_CODE_UNSPECIFIED = 0;
    // Success
    OK = 1;
    // Failure
    ERROR = 2;
  }

  // Status code.
  optional ResponseStatusCode response_status_code = 1;

  // Error message.
  optional string error_message = 2;
}